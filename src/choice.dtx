% \subsubsection{Multiple choice and the like}
% \DescribeEnv{multipleChoice}{Multiple choice}
%    \begin{macrocode}
%<*classXimera>
% Jim: Originally this was \renewcommand{\theenumi}{$(\mathrm{\alph{enumi}})$}
% but that breaks tex4ht because mathmode can only be processed by mathjax.
% so now I made this just italicized.
% Bart: As of July 2021, I *think* the comment above is obsolete.
%    \end{macrocode}
% \subsubsection{Options}
%    \begin{macrocode}
\define@key{choice}{value}[]{\def\choice@value{#1}}
%    \end{macrocode}
% This flags the answer as the correct answer
%    \begin{macrocode}
\define@boolkey{choice}{correct}[true]{\def\choice@correct{#1}}
%    \end{macrocode}
% Use an ID to refer to the choice.
%    \begin{macrocode}
\define@key{multipleChoice}{id}{\def\mc@id{#1}}
%    \end{macrocode}
% |\otherchoice| outputs the item if correct and nothing if incorrect.
%    \begin{macrocode}
\define@key{otherchoice}{value}[]{\def\otherchoice@value{#1}}
\define@boolkey{otherchoice}{correct}[true]{\def\otherchoice@correct{#1}}
%    \end{macrocode}
% Default key choices for multiple choice options.
% Default for choice pairs.
% Default: answers without the option "correct=true" is "incorrect".
%    \begin{macrocode}
\setkeys{choice}{correct=false,value=}
%    \end{macrocode}
% Defaults for multipleChoice pairs.
% Default to no id? -- Jason
%    \begin{macrocode}
\setkeys{multipleChoice}{id=}
%    \end{macrocode}
% Defaults for otherchoice pairs.
% Default "otherchoice" to behave like "choice" for error checking.
%    \begin{macrocode}
\setkeys{otherchoice}{correct=false,value=}
%</classXimera>
%    \end{macrocode}
%
% \subsubsection{Choices}
% \DescribeMacro{\choice}{Like |\item| but for choice environments.}
% choice command denotes a possible answer choice for the multiple choice question.
% To make this work online, we must insert a rule below the choice entry. We'll do this now
% with |\@itemboxup| and  |\@itemredact|.
%    \begin{macrocode}
%<*classXimera>
\newcounter{ximeraWebChoiceEnumi}

\newcommand{\@choicebox}[2]{%
  \parbox{\linewidth}{
    \renewcommand{\arraystretch}{1}
    \begin{tabular}{rl}\hfil\\
      \parbox{.05\linewidth}{\flushright\large\bfseries(\alph{#1})} &
      \parbox{.9\linewidth-2\tabcolsep}{\flushleft #2} \\\hfil 
  \end{tabular}}
}%

\def\@choiceBoxLineSqueeze{-1ex}

\newcommand{\choice}[2][]{%
\setkeys{choice}{correct=false}%  
\setkeys{choice}{#1}%% options are 'correct' or nothing
\ifweb
\ifthenelse{\boolean{\choice@correct}}
    {
      \addtocounter{ximeraWebChoiceEnumi}{1}
      \let\@mytmplen\relax% %% I need a temp length that can be negative for depth
      \newlength\@mytmplen% %% so we do it here
      \setlength\@mytmplen{\totalheightof{\@choicebox{ximeraWebChoiceEnumi}{#2}}}%
      \hspace{-\tabcolsep}\rule[-0.5\@mytmplen]{\linewidth}{\totalheightof{\@choicebox{ximeraWebChoiceEnumi}{#2}}}%
      \hspace{-\linewidth}\@choicebox{ximeraWebChoiceEnumi}{#2}%
      \setkeys{choice}{correct=false}\\[\@choiceBoxLineSqueeze]%
    }
    {
      \addtocounter{ximeraWebChoiceEnumi}{1}
      \let\@mytmplen\relax %% I need a temp length that can be negative for depth
      \newlength\@mytmplen %% so we do it here
      \setlength\@mytmplen{\totalheightof{\@choicebox{ximeraWebChoiceEnumi}{#2}}}%
      \hspace{-\tabcolsep}\rule[-0.5\@mytmplen]{\linewidth}{\totalheightof{\@choicebox{ximeraWebChoiceEnumi}{#2}}}%
      \hspace{-\linewidth}\@choicebox{ximeraWebChoiceEnumi}{#2}%
      \\[-.8ex]
    }
\else
\ifthenelse{\boolean{\choice@correct}}
    {% Begin then result
      \ifhandout
    \item{#2}% if it's a handout do nothing
      \else% otherwise use a checkmark to indicate the correct choice to the author
    \item{#2}\,\checkmark\,\setkeys{choice}{correct=false}
      \fi% for handout
    }
    {\item{#2}}
    % End then result
    \fi% for web
}
%% %Define an expandable version of choice Not really meant to be used outside this package (used in wordChoice)
%% % Is there a reason we can't just always use this as default? -- Jason
%% \newcommand{\choiceEXP}[2][]{% COMMENTED OUT BY SNAPP JULY 26 2021
%% 	\expandafter\setkeys\expandafter{choice}{#1}%
%% 	\item{#2}
%% 	\ifthenelse{\boolean{\choice@correct}}
%% 		{% Begin then result
%% 		\ifhandout 
%% 		\else 
%% 			\,\checkmark\,\setkeys{choice}{correct=false}
%% 		\fi
%% 		}% End then result
%% 		{}% Begin/End else result.
%% 	} %% note all the {} are needed in case the choice has [] in it.% COMMENTED OUT BY SNAPP JULY 26 2021

% \otherchoice is the \choice used in wordChoice command.
\newcommand{\otherchoice}[2][]{%
\ignorespaces%
\setkeys{otherchoice}{#1}%
\ifthenelse{\boolean{\otherchoice@correct}}%
{% Start then result
#2\ignorespaces\setkeys{otherchoice}{correct=false}\ignorespaces%
}% End then result
{}% Start/End else result
\ignorespaces%
}%

\newcommand{\inlinechoice}[2][]{%
\setkeys{choice}{#1}%
\iffirstinlinechoice
(\hspace{-.25em}
\firstinlinechoicefalse
\else
/
\fi
#2
\ifthenelse{\boolean{\choice@correct}}%
{% Start then result
\ifhandout\else\checkmark\ignorespaces\setkeys{choice}{correct=false}\ignorespaces\fi%
}% End then result
{}% Start/End else result
\hspace{-.25em}\ignorespaces%
}
%</classXimera>
%    \end{macrocode}
% \subsubsection{Checkwork}
% The command |\@checkwork| helps make a button to validate environments that use choice
%    \begin{macrocode}
%<*classXimera>
\def\@checkworkwidth{12em}
\newcommand{\@checkwork}{\rule[-0.75em]{\@checkworkwidth}{2.5em}}
%</classXimera>
% \subsubsection{Environment(s)}
% The environment |multipleChoice@| is for internal use only. 
% \DescribeEnv{multipleChoice}{Wrap |\choice|s in a |multipleChoice| environment to make a multiple choice question.}
%    \begin{macrocode}
%<*classXimera>
\newenvironment{multipleChoice}[1][]
        {% Environment Start Code
        \AtBeginEnvironment{choice}{\special{ximera:rule:open multiplechoice correct}}
        \AtEndEnvironment{choice}{\special{ximera:rule:close multiplechoice correct}}
        \special{ximera:begin multiplechoice}
	\setkeys{multipleChoice}{#1}%
        \ifweb\begin{center}\else
        \begin{trivlist}
        \item[\hskip \labelsep\small\bfseries Multiple Choice:]\hfil
          \begin{enumerate}
        \fi%  
	}% Note this means that \item has to be the first line after \begin{multipleChoice}.
	{% Environment End Code
        \ifweb\end{center}\setcounter{ximeraWebChoiceEnumi}{0} \hfill\special{ximera:rule checkwork multiplechoice}\@checkwork % button for checking work
        \else
        \end{enumerate}
	\end{trivlist}
        \fi
        \special{ximera:end multiplechoice}
	}

%multipleChoice@ is for internal use only! (used in wordChoice)
%this is simply a wrapper for the sole showing (other)choice.
\newenvironment{multipleChoice@}[1][]{}{)}
%</classXimera>
%    \end{macrocode}

% \subsection{Word choice}
% \DescribeMacro{\wordChoice}{An in-line version of multipleChoice:
% uses enumitem package note, it is coded as a single line to avoid
% unwanted spaces in ``given'' mode.}
%    \begin{macrocode}
%<*classXimera>
\newcommand{\wordChoice}[1]{%
\let\choicetemp\choice% Assign a "choicetemp" command to duplicate choice.
\ifwordchoicegiven% If wordchoice option is on, we need to juggle around some definitions.
\let\choice\otherchoice%
%\begin{multipleChoice@}% -unnecessary (REMOVE THIS LINE IF THE YEAR IS 2019 or Beyond)
#1
%\end{multipleChoice@}% -unnecessary (REMOVE THIS LINE IF THE YEAR IS 2019 or Beyond)
\else% If it isn't the regular "choice" command should work.
\let\choice\inlinechoice%
\begin{multipleChoice@}%
#1%
\end{multipleChoice@}%
\fi%
\let\choice\choicetemp% Now that choicetmp has been manipulated to what we want, replace choice with it.
}%


%</classXimera>
%    \end{macrocode}
% This is actually just word choice
%% %    \begin{macrocode} COMMENTED BY SNAPP 8/1/2021
%% %<*htXimera>
%% \renewenvironment{multipleChoice@}{\refstepcounter{problem}}{}%
%% \ConfigureEnv{multipleChoice@}{\stepcounter{identification}\IgnorePar\HCode{<span class="word-choice" id="word-choice\arabic{identification}">}}{\HCode{</span>}\IgnoreIndent}{}{}
%% %</htXimera>
%% %    \end{macrocode} END COMMENT

% \subsection{Select all}
% \DescribeEnv{selectAll}{A multiple-multiple choice question}
%    \begin{macrocode} 
%<*classXimera>
\newenvironment{selectAll}[1][]
        {% Environment Start Code
        \AtBeginEnvironment{choice}{\special{ximera:rule:open selectall correct}}
        \AtEndEnvironment{choice}{\special{ximera:rule:close selectall correct}}
        \special{ximera:begin selectall}
	\setkeys{selectAll}{#1}%
        \ifweb\begin{center}\else
        \begin{trivlist}
        \item[\hskip \labelsep\small\bfseries Select All Correct Answers:]\hfil
          \begin{enumerate}
        \fi%  
	}% Note this means that \item has to be the first line after \begin{selectAll}.
	{% Environment End Code
        \ifweb\end{center}\setcounter{ximeraWebChoiceEnumi}{0} \hfill\special{ximera:rule checkwork selectall}\@checkwork % button for checking work
        \else
        \end{enumerate}
	\end{trivlist}
        \fi
        \special{ximera:end selectall}
	}
%</classXimera>
%    \end{macrocode}

% In the future we need this to (optionally) be displayed in the
% problem, while the actual code lives in the solution. Here is how
% this could be implemented: Like the title/maketitle commands, the
% multiple-choice could be stored in |\themultiplechoice|, flip a
% boolean, and execute |\makemultiplechoice| at the |\end| of the
% problem.  We should also make a command called |\showchoices| that
% will show choices in the handout.


